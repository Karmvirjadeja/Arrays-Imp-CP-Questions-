
//TWo sum Brute force
// Calculating the each and every sum until the target sum is found

// Method 1 : Sorting  O(NlogN)

// Method 2 : HashTable  O(N)

std::vector<int> twoSum(const std::vector<int>& nums, int target) 
{ std::unordered_map<int, int> map; 
for (int i = 0; i < nums.size(); ++i) 
{
 int complement = target - nums[i];
 if (map.find(complement) != map.end()) 
{ 
return {map[complement], i}; } map[nums[i]] = i; 
} // Return an empty vector if no solution is found
 return {};
 }

